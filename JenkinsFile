// pipeline {
//     agent any
//
//     environment {
//         PATH = "${tool 'Maven'}/bin:${env.PATH}"
//         registryName = 'algabrizaid/mysql-springboot-azure'
//         imageTag = "latest-${BUILD_NUMBER}"
//         GIT_CONFIG_NAME = 'zaidgabri'
//         GIT_CONFIG_EMAIL = 'zaidgabri976@gmail.com'
//     }
//
//     stages {
//         stage('Build and Test') {
//             steps {
//                 sh 'ls -ltr'
//                 sh 'mvn clean package'
//             }
//         }
//
//         stage('Static Code Analysis') {
//             environment {
//                 SONAR_URL = "http://52.149.213.148:9000"
//             }
//             steps {
//                 withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
//                     sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
//                 }
//             }
//         }
//
//         stage('Build and Push Docker Image') {
//             environment {
//                 DOCKER_IMAGE = "algabrizaid/mysql-springboot-azure:${imageTag}"
//                 DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/helloworld/Dockerfile"
//                 REGISTRY_CREDENTIALS = credentials('dockerhub')
//             }
//             steps {
//                 script {
//                     sh 'docker build -t ${DOCKER_IMAGE} .'
//                     def dockerImage = docker.image("${DOCKER_IMAGE}")
//                     docker.withRegistry('https://index.docker.io/v1/', "dockerhub") {
//                         dockerImage.push()
//                     }
//                 }
//             }
//         }
//
//         stage('Update Manifests and Push to Git') {
//             steps {
//                 script {
//                     echo "Current directory: ${pwd()}"
//                     def cloneDir = 'GitOps'
//
//                     if (!fileExists(cloneDir)) {
//                         sh "git clone https://github.com/zaidgabri/GitOps.git ${cloneDir}"
//                     }
//
//                     gitConfigure()
//
//                     def manifestsDir = "${cloneDir}/k8s"
//                     def newImageLine = "image: ${registryName}:${imageTag}"
//
//                     echo "File content before sed:"
//                     sh "cat ${manifestsDir}/deployment.yml"
//
//                     sh "sed -i 's|image: algabrizaid/mysql-springboot-azure:latest.*|${newImageLine}|' ${manifestsDir}/deployment.yml || echo 'sed command failed'"
//
//                     echo "File content after sed:"
//                     sh "cat ${manifestsDir}/deployment.yml"
//
//                     withCredentials([usernamePassword(credentialsId: 'git', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
//                         dir(cloneDir) {
//                             sh "git status"
//                             sh "git add ."
//                             sh "git status" // Print status again to verify changes
//                             sh "git commit -m 'Update image tag in Kubernetes manifests'"
//                             sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/zaidgabri/GitOps.git HEAD:main"
//                         }
//                     }
//
//                     sh "rm -rf ${cloneDir}"
//                 }
//             }
//         }
//     }
// }
//
// def gitConfigure() {
//     sh "git config user.email ${GIT_CONFIG_EMAIL}"
//     sh "git config user.name ${GIT_CONFIG_NAME}"
// }
pipeline {
    agent any

    environment {
        PATH = "${tool 'Maven'}/bin:${env.PATH}"
        registryName = 'algabrizaid/mysql-springboot-azure'
        imageTag = "latest-${BUILD_NUMBER}"
        GIT_CONFIG_NAME = 'zaidgabri'
        GIT_CONFIG_EMAIL = 'zaidgabri976@gmail.com'
        DB_USER = 'admin'
    }

    stages {
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'mvn clean package'
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://52.149.213.148:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "algabrizaid/mysql-springboot-azure:${imageTag}"
                DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/helloworld/Dockerfile"
                REGISTRY_CREDENTIALS = credentials('dockerhub')
                DB_PASSWORD = credentials('mysql') // Update with your MySQL credentials ID
            }
            steps {
                script {
                    sh 'docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "dockerhub") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Manifests and Push to Git') {
            steps {
                script {
                    echo "Current directory: ${pwd()}"
                    def cloneDir = 'GitOps'

                    if (!fileExists(cloneDir)) {
                        sh "git clone https://github.com/zaidgabri/GitOps.git ${cloneDir}"
                    }

                    gitConfigure()

                    def manifestsDir = "${cloneDir}/k8s"
                    def newImageLine = "image: ${registryName}:${imageTag}"

                    echo "File content before sed:"
                    sh "cat ${manifestsDir}/deployment.yml"

                    sh "sed -i 's|image: algabrizaid/mysql-springboot-azure:latest.*|${newImageLine}|' ${manifestsDir}/deployment.yml || echo 'sed command failed'"

                    echo "File content after sed:"
                    sh "cat ${manifestsDir}/deployment.yml"

                    withCredentials([usernamePassword(credentialsId: 'git', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        dir(cloneDir) {
                            sh "git status"
                            sh "git add ."
                            sh "git status" // Print status again to verify changes
                            sh "git commit -m 'Update image tag in Kubernetes manifests'"
                            sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/zaidgabri/GitOps.git HEAD:main"
                        }
                    }

                    sh "rm -rf ${cloneDir}"
                }
            }
        }
    }
}

def gitConfigure() {
    sh "git config user.email ${GIT_CONFIG_EMAIL}"
    sh "git config user.name ${GIT_CONFIG_NAME}"
}

